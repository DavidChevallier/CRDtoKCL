"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema CompositionRevision:
    """
    A CompositionRevision represents a revision of a Composition. Crossplane
    creates new revisions when there are changes to the Composition.


    Crossplane creates and manages CompositionRevisions. Don't directly edit
    CompositionRevisions.

    Attributes
    ----------
    apiVersion : str, default is "apiextensions.crossplane.io/v1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "CompositionRevision", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : ApiextensionsCrossplaneIoV1CompositionRevisionSpec, default is Undefined, optional
        spec
    status : ApiextensionsCrossplaneIoV1CompositionRevisionStatus, default is Undefined, optional
        status
    """


    apiVersion: "apiextensions.crossplane.io/v1" = "apiextensions.crossplane.io/v1"

    kind: "CompositionRevision" = "CompositionRevision"

    metadata?: v1.ObjectMeta

    spec?: ApiextensionsCrossplaneIoV1CompositionRevisionSpec

    status?: ApiextensionsCrossplaneIoV1CompositionRevisionStatus


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpec:
    """
    CompositionRevisionSpec specifies the desired state of the composition
    revision.

    Attributes
    ----------
    compositeTypeRef : ApiextensionsCrossplaneIoV1CompositionRevisionSpecCompositeTypeRef, default is Undefined, required
        composite type ref
    environment : ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironment, default is Undefined, optional
        environment
    mode : str, default is "Resources", optional
        Mode controls what type or "mode" of Composition will be used.


        "Resources" (the default) indicates that a Composition uses what is
        commonly referred to as "Patch & Transform" or P&T composition. This mode
        of Composition uses an array of resources, each a template for a composed
        resource.


        "Pipeline" indicates that a Composition specifies a pipeline
        of Composition Functions, each of which is responsible for producing
        composed resources that Crossplane should create or update. THE PIPELINE
        MODE IS A BETA FEATURE. It is not honored if the relevant Crossplane
        feature flag is disabled.
    patchSets : [ApiextensionsCrossplaneIoV1CompositionRevisionSpecPatchSetsItems0], default is Undefined, optional
        PatchSets define a named set of patches that may be included by any
        resource in this Composition. PatchSets cannot themselves refer to other
        PatchSets.


        PatchSets are only used by the "Resources" mode of Composition. They
        are ignored by other modes.
    pipeline : [ApiextensionsCrossplaneIoV1CompositionRevisionSpecPipelineItems0], default is Undefined, optional
        Pipeline is a list of composition function steps that will be used when a
        composite resource referring to this composition is created. One of
        resources and pipeline must be specified - you cannot specify both.


        The Pipeline is only used by the "Pipeline" mode of Composition. It is
        ignored by other modes.


        THIS IS A BETA FIELD. It is not honored if the relevant Crossplane
        feature flag is disabled.
    publishConnectionDetailsWithStoreConfigRef : ApiextensionsCrossplaneIoV1CompositionRevisionSpecPublishConnectionDetailsWithStoreConfigRef, default is Undefined, optional
        publish connection details with store config ref
    resources : [ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0], default is Undefined, optional
        Resources is a list of resource templates that will be used when a
        composite resource referring to this composition is created.


        Resources are only used by the "Resources" mode of Composition. They are
        ignored by other modes.
    revision : int, default is Undefined, required
        Revision number. Newer revisions have larger numbers.
    writeConnectionSecretsToNamespace : str, default is Undefined, optional
        WriteConnectionSecretsToNamespace specifies the namespace in which the
        connection secrets of composite resource dynamically provisioned using
        this composition will be created.
        This field is planned to be replaced in a future release in favor of
        PublishConnectionDetailsWithStoreConfigRef. Currently, both could be
        set independently and connection details would be published to both
        without affecting each other as long as related fields at MR level
        specified.
    """


    compositeTypeRef: ApiextensionsCrossplaneIoV1CompositionRevisionSpecCompositeTypeRef

    environment?: ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironment

    mode?: "Resources" | "Pipeline" = "Resources"

    patchSets?: [ApiextensionsCrossplaneIoV1CompositionRevisionSpecPatchSetsItems0]

    pipeline?: [ApiextensionsCrossplaneIoV1CompositionRevisionSpecPipelineItems0]

    publishConnectionDetailsWithStoreConfigRef?: ApiextensionsCrossplaneIoV1CompositionRevisionSpecPublishConnectionDetailsWithStoreConfigRef

    resources?: [ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0]

    revision: int

    writeConnectionSecretsToNamespace?: str


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecCompositeTypeRef:
    """
    CompositeTypeRef specifies the type of composite resource that this
    composition is compatible with.

    Attributes
    ----------
    apiVersion : str, default is Undefined, required
        APIVersion of the type.
    kind : str, default is Undefined, required
        Kind of the type.
    """


    apiVersion: str

    kind: str


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironment:
    """
    Environment configures the environment in which resources are rendered.


    THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
    unless the relevant Crossplane feature flag is enabled, and may be
    changed or removed without notice.

    Attributes
    ----------
    defaultData : {str:any}, default is Undefined, optional
        DefaultData statically defines the initial state of the environment.
        It has the same schema-less structure as the data field in
        environment configs.
        It is overwritten by the selected environment configs.
    environmentConfigs : [ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentEnvironmentConfigsItems0], default is Undefined, optional
        EnvironmentConfigs selects a list of `EnvironmentConfig`s. The resolved
        resources are stored in the composite resource at
        `spec.environmentConfigRefs` and is only updated if it is null.


        The list of references is used to compute an in-memory environment at
        compose time. The data of all object is merged in the order they are
        listed, meaning the values of EnvironmentConfigs with a larger index take
        priority over ones with smaller indices.


        The computed environment can be accessed in a composition using
        `FromEnvironmentFieldPath` and `CombineFromEnvironment` patches.
    patches : [ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentPatchesItems0], default is Undefined, optional
        Patches is a list of environment patches that are executed before a
        composition's resources are composed.
    policy : ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentPolicy, default is Undefined, optional
        policy
    """


    defaultData?: {str:any}

    environmentConfigs?: [ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentEnvironmentConfigsItems0]

    patches?: [ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentPatchesItems0]

    policy?: ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentPolicy


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentEnvironmentConfigsItems0:
    """
    EnvironmentSource selects a EnvironmentConfig resource.

    Attributes
    ----------
    ref : ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentEnvironmentConfigsItems0Ref, default is Undefined, optional
        ref
    selector : ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentEnvironmentConfigsItems0Selector, default is Undefined, optional
        selector
    $type : str, default is "Reference", optional
        Type specifies the way the EnvironmentConfig is selected.
        Default is `Reference`
    """


    ref?: ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentEnvironmentConfigsItems0Ref

    selector?: ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentEnvironmentConfigsItems0Selector

    $type?: "Reference" | "Selector" = "Reference"


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentEnvironmentConfigsItems0Ref:
    """
    Ref is a named reference to a single EnvironmentConfig.
    Either Ref or Selector is required.

    Attributes
    ----------
    name : str, default is Undefined, required
        The name of the object.
    """


    name: str


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentEnvironmentConfigsItems0Selector:
    """
    Selector selects EnvironmentConfig(s) via labels.

    Attributes
    ----------
    matchLabels : [ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentEnvironmentConfigsItems0SelectorMatchLabelsItems0], default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    maxMatch : int, default is Undefined, optional
        MaxMatch specifies the number of extracted EnvironmentConfigs in Multiple mode, extracts all if nil.
    minMatch : int, default is Undefined, optional
        MinMatch specifies the required minimum of extracted EnvironmentConfigs in Multiple mode.
    mode : str, default is "Single", optional
        Mode specifies retrieval strategy: "Single" or "Multiple".
    sortByFieldPath : str, default is "metadata.name", optional
        SortByFieldPath is the path to the field based on which list of EnvironmentConfigs is alphabetically sorted.
    """


    matchLabels?: [ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentEnvironmentConfigsItems0SelectorMatchLabelsItems0]

    maxMatch?: int

    minMatch?: int

    mode?: "Single" | "Multiple" = "Single"

    sortByFieldPath?: str = "metadata.name"


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentEnvironmentConfigsItems0SelectorMatchLabelsItems0:
    """
    An EnvironmentSourceSelectorLabelMatcher acts like a k8s label selector but
    can draw the label value from a different path.

    Attributes
    ----------
    fromFieldPathPolicy : str, default is "Required", optional
        FromFieldPathPolicy specifies the policy for the valueFromFieldPath.
        The default is Required, meaning that an error will be returned if the
        field is not found in the composite resource.
        Optional means that if the field is not found in the composite resource,
        that label pair will just be skipped. N.B. other specified label
        matchers will still be used to retrieve the desired
        environment config, if any.
    key : str, default is Undefined, required
        Key of the label to match.
    $type : str, default is "FromCompositeFieldPath", optional
        Type specifies where the value for a label comes from.
    value : str, default is Undefined, optional
        Value specifies a literal label value.
    valueFromFieldPath : str, default is Undefined, optional
        ValueFromFieldPath specifies the field path to look for the label value.
    """


    fromFieldPathPolicy?: "Optional" | "Required" = "Required"

    key: str

    $type?: "FromCompositeFieldPath" | "Value" = "FromCompositeFieldPath"

    value?: str

    valueFromFieldPath?: str


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentPatchesItems0:
    """
    EnvironmentPatch is a patch for a Composition environment.

    Attributes
    ----------
    combine : ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentPatchesItems0Combine, default is Undefined, optional
        combine
    fromFieldPath : str, default is Undefined, optional
        FromFieldPath is the path of the field on the resource whose value is
        to be used as input. Required when type is FromCompositeFieldPath or
        ToCompositeFieldPath.
    policy : ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentPatchesItems0Policy, default is Undefined, optional
        policy
    toFieldPath : str, default is Undefined, optional
        ToFieldPath is the path of the field on the resource whose value will
        be changed with the result of transforms. Leave empty if you'd like to
        propagate to the same path as fromFieldPath.
    transforms : [ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentPatchesItems0TransformsItems0], default is Undefined, optional
        Transforms are the list of functions that are used as a FIFO pipe for the
        input to be transformed.
    $type : str, default is "FromCompositeFieldPath", optional
        Type sets the patching behaviour to be used. Each patch type may require
        its own fields to be set on the Patch object.
    """


    combine?: ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentPatchesItems0Combine

    fromFieldPath?: str

    policy?: ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentPatchesItems0Policy

    toFieldPath?: str

    transforms?: [ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentPatchesItems0TransformsItems0]

    $type?: "FromCompositeFieldPath" | "ToCompositeFieldPath" | "CombineFromComposite" | "CombineToComposite" = "FromCompositeFieldPath"


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentPatchesItems0Combine:
    """
    Combine is the patch configuration for a CombineFromComposite or
    CombineToComposite patch.

    Attributes
    ----------
    strategy : str, default is Undefined, required
        Strategy defines the strategy to use to combine the input variable values.
        Currently only string is supported.
    string : ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentPatchesItems0CombineString, default is Undefined, optional
        string
    variables : [ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentPatchesItems0CombineVariablesItems0], default is Undefined, required
        Variables are the list of variables whose values will be retrieved and
        combined.
    """


    strategy: "string"

    string?: ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentPatchesItems0CombineString

    variables: [ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentPatchesItems0CombineVariablesItems0]


    check:
        len(variables) >= 1


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentPatchesItems0CombineString:
    """
    String declares that input variables should be combined into a single
    string, using the relevant settings for formatting purposes.

    Attributes
    ----------
    fmt : str, default is Undefined, required
        Format the input using a Go format string. See
        https://golang.org/pkg/fmt/ for details.
    """


    fmt: str


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentPatchesItems0CombineVariablesItems0:
    """
    A CombineVariable defines the source of a value that is combined with
    others to form and patch an output value. Currently, this only supports
    retrieving values from a field path.

    Attributes
    ----------
    fromFieldPath : str, default is Undefined, required
        FromFieldPath is the path of the field on the source whose value is
        to be used as input.
    """


    fromFieldPath: str


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentPatchesItems0Policy:
    """
    Policy configures the specifics of patching behaviour.

    Attributes
    ----------
    fromFieldPath : str, default is Undefined, optional
        FromFieldPath specifies how to patch from a field path. The default is
        'Optional', which means the patch will be a no-op if the specified
        fromFieldPath does not exist. Use 'Required' if the patch should fail if
        the specified path does not exist.
    mergeOptions : ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentPatchesItems0PolicyMergeOptions, default is Undefined, optional
        merge options
    """


    fromFieldPath?: "Optional" | "Required"

    mergeOptions?: ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentPatchesItems0PolicyMergeOptions


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentPatchesItems0PolicyMergeOptions:
    """
    MergeOptions Specifies merge options on a field path.

    Attributes
    ----------
    appendSlice : bool, default is Undefined, optional
        Specifies that already existing elements in a merged slice should be preserved
    keepMapValues : bool, default is Undefined, optional
        Specifies that already existing values in a merged map should be preserved
    """


    appendSlice?: bool

    keepMapValues?: bool


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentPatchesItems0TransformsItems0:
    """
    Transform is a unit of process whose input is transformed into an output with
    the supplied configuration.

    Attributes
    ----------
    convert : ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentPatchesItems0TransformsItems0Convert, default is Undefined, optional
        convert
    $map : {str:any}, default is Undefined, optional
        Map uses the input as a key in the given map and returns the value.
    match : ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentPatchesItems0TransformsItems0Match, default is Undefined, optional
        match
    math : ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentPatchesItems0TransformsItems0Math, default is Undefined, optional
        math
    string : ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentPatchesItems0TransformsItems0String, default is Undefined, optional
        string
    $type : str, default is Undefined, required
        Type of the transform to be run.
    """


    convert?: ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentPatchesItems0TransformsItems0Convert

    $map?: {str:any}

    match?: ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentPatchesItems0TransformsItems0Match

    math?: ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentPatchesItems0TransformsItems0Math

    string?: ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentPatchesItems0TransformsItems0String

    $type: "map" | "match" | "math" | "string" | "convert"


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentPatchesItems0TransformsItems0Convert:
    """
    Convert is used to cast the input into the given output type.

    Attributes
    ----------
    format : str, default is Undefined, optional
        The expected input format.


        * `quantity` - parses the input as a K8s [`resource.Quantity`](https://pkg.go.dev/k8s.io/apimachinery/pkg/api/resource#Quantity).
        Only used during `string -> float64` conversions.
        * `json` - parses the input as a JSON string.
        Only used during `string -> object` or `string -> list` conversions.


        If this property is null, the default conversion is applied.
    toType : str, default is Undefined, required
        ToType is the type of the output of this transform.
    """


    format?: "none" | "quantity" | "json"

    toType: "string" | "int" | "int64" | "bool" | "float64" | "object" | "array"


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentPatchesItems0TransformsItems0Match:
    """
    Match is a more complex version of Map that matches a list of patterns.

    Attributes
    ----------
    fallbackTo : str, default is "Value", optional
        Determines to what value the transform should fallback if no pattern matches.
    fallbackValue : any, default is Undefined, optional
        The fallback value that should be returned by the transform if now pattern
        matches.
    patterns : [ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentPatchesItems0TransformsItems0MatchPatternsItems0], default is Undefined, optional
        The patterns that should be tested against the input string.
        Patterns are tested in order. The value of the first match is used as
        result of this transform.
    """


    fallbackTo?: "Value" | "Input" = "Value"

    fallbackValue?: any

    patterns?: [ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentPatchesItems0TransformsItems0MatchPatternsItems0]


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentPatchesItems0TransformsItems0MatchPatternsItems0:
    """
    MatchTransformPattern is a transform that returns the value that matches a
    pattern.

    Attributes
    ----------
    literal : str, default is Undefined, optional
        Literal exactly matches the input string (case sensitive).
        Is required if `type` is `literal`.
    regexp : str, default is Undefined, optional
        Regexp to match against the input string.
        Is required if `type` is `regexp`.
    result : any, default is Undefined, required
        The value that is used as result of the transform if the pattern matches.
    $type : str, default is "literal", required
        Type specifies how the pattern matches the input.


        * `literal` - the pattern value has to exactly match (case sensitive) the
        input string. This is the default.


        * `regexp` - the pattern treated as a regular expression against
        which the input string is tested. Crossplane will throw an error if the
        key is not a valid regexp.
    """


    literal?: str

    regexp?: str

    result: any

    $type: "literal" | "regexp" = "literal"


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentPatchesItems0TransformsItems0Math:
    """
    Math is used to transform the input via mathematical operations such as
    multiplication.

    Attributes
    ----------
    clampMax : int, default is Undefined, optional
        ClampMax makes sure that the value is not bigger than the given value.
    clampMin : int, default is Undefined, optional
        ClampMin makes sure that the value is not smaller than the given value.
    multiply : int, default is Undefined, optional
        Multiply the value.
    $type : str, default is "Multiply", optional
        Type of the math transform to be run.
    """


    clampMax?: int

    clampMin?: int

    multiply?: int

    $type?: "Multiply" | "ClampMin" | "ClampMax" = "Multiply"


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentPatchesItems0TransformsItems0String:
    """
    String is used to transform the input into a string or a different kind
    of string. Note that the input does not necessarily need to be a string.

    Attributes
    ----------
    convert : str, default is Undefined, optional
        Optional conversion method to be specified.
        `ToUpper` and `ToLower` change the letter case of the input string.
        `ToBase64` and `FromBase64` perform a base64 conversion based on the input string.
        `ToJson` converts any input value into its raw JSON representation.
        `ToSha1`, `ToSha256` and `ToSha512` generate a hash value based on the input
        converted to JSON.
        `ToAdler32` generate a addler32 hash based on the input string.
    fmt : str, default is Undefined, optional
        Format the input using a Go format string. See
        https://golang.org/pkg/fmt/ for details.
    join : ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentPatchesItems0TransformsItems0StringJoin, default is Undefined, optional
        join
    regexp : ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentPatchesItems0TransformsItems0StringRegexp, default is Undefined, optional
        regexp
    trim : str, default is Undefined, optional
        Trim the prefix or suffix from the input
    $type : str, default is "Format", optional
        Type of the string transform to be run.
    """


    convert?: "ToUpper" | "ToLower" | "ToBase64" | "FromBase64" | "ToJson" | "ToSha1" | "ToSha256" | "ToSha512" | "ToAdler32"

    fmt?: str

    join?: ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentPatchesItems0TransformsItems0StringJoin

    regexp?: ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentPatchesItems0TransformsItems0StringRegexp

    trim?: str

    $type?: "Format" | "Convert" | "TrimPrefix" | "TrimSuffix" | "Regexp" | "Join" = "Format"


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentPatchesItems0TransformsItems0StringJoin:
    """
    Join defines parameters to join a slice of values to a string.

    Attributes
    ----------
    separator : str, default is Undefined, required
        Separator defines the character that should separate the values from each
        other in the joined string.
    """


    separator: str


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentPatchesItems0TransformsItems0StringRegexp:
    """
    Extract a match from the input using a regular expression.

    Attributes
    ----------
    group : int, default is Undefined, optional
        Group number to match. 0 (the default) matches the entire expression.
    match : str, default is Undefined, required
        Match string. May optionally include submatches, aka capture groups.
        See https://pkg.go.dev/regexp/ for details.
    """


    group?: int

    match: str


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecEnvironmentPolicy:
    """
    Policy represents the Resolve and Resolution policies which apply to
    all EnvironmentSourceReferences in EnvironmentConfigs list.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecPatchSetsItems0:
    """
    A PatchSet is a set of patches that can be reused from all resources within
    a Composition.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of this PatchSet.
    patches : [ApiextensionsCrossplaneIoV1CompositionRevisionSpecPatchSetsItems0PatchesItems0], default is Undefined, required
        Patches will be applied as an overlay to the base resource.
    """


    name: str

    patches: [ApiextensionsCrossplaneIoV1CompositionRevisionSpecPatchSetsItems0PatchesItems0]


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecPatchSetsItems0PatchesItems0:
    """
    Patch objects are applied between composite and composed resources. Their
    behaviour depends on the Type selected. The default Type,
    FromCompositeFieldPath, copies a value from the composite resource to
    the composed resource, applying any defined transformers.

    Attributes
    ----------
    combine : ApiextensionsCrossplaneIoV1CompositionRevisionSpecPatchSetsItems0PatchesItems0Combine, default is Undefined, optional
        combine
    fromFieldPath : str, default is Undefined, optional
        FromFieldPath is the path of the field on the resource whose value is
        to be used as input. Required when type is FromCompositeFieldPath,
        FromEnvironmentFieldPath, ToCompositeFieldPath, ToEnvironmentFieldPath.
    patchSetName : str, default is Undefined, optional
        PatchSetName to include patches from. Required when type is PatchSet.
    policy : ApiextensionsCrossplaneIoV1CompositionRevisionSpecPatchSetsItems0PatchesItems0Policy, default is Undefined, optional
        policy
    toFieldPath : str, default is Undefined, optional
        ToFieldPath is the path of the field on the resource whose value will
        be changed with the result of transforms. Leave empty if you'd like to
        propagate to the same path as fromFieldPath.
    transforms : [ApiextensionsCrossplaneIoV1CompositionRevisionSpecPatchSetsItems0PatchesItems0TransformsItems0], default is Undefined, optional
        Transforms are the list of functions that are used as a FIFO pipe for the
        input to be transformed.
    $type : str, default is "FromCompositeFieldPath", optional
        Type sets the patching behaviour to be used. Each patch type may require
        its own fields to be set on the Patch object.
    """


    combine?: ApiextensionsCrossplaneIoV1CompositionRevisionSpecPatchSetsItems0PatchesItems0Combine

    fromFieldPath?: str

    patchSetName?: str

    policy?: ApiextensionsCrossplaneIoV1CompositionRevisionSpecPatchSetsItems0PatchesItems0Policy

    toFieldPath?: str

    transforms?: [ApiextensionsCrossplaneIoV1CompositionRevisionSpecPatchSetsItems0PatchesItems0TransformsItems0]

    $type?: "FromCompositeFieldPath" | "FromEnvironmentFieldPath" | "PatchSet" | "ToCompositeFieldPath" | "ToEnvironmentFieldPath" | "CombineFromEnvironment" | "CombineFromComposite" | "CombineToComposite" | "CombineToEnvironment" = "FromCompositeFieldPath"


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecPatchSetsItems0PatchesItems0Combine:
    """
    Combine is the patch configuration for a CombineFromComposite,
    CombineFromEnvironment, CombineToComposite or CombineToEnvironment patch.

    Attributes
    ----------
    strategy : str, default is Undefined, required
        Strategy defines the strategy to use to combine the input variable values.
        Currently only string is supported.
    string : ApiextensionsCrossplaneIoV1CompositionRevisionSpecPatchSetsItems0PatchesItems0CombineString, default is Undefined, optional
        string
    variables : [ApiextensionsCrossplaneIoV1CompositionRevisionSpecPatchSetsItems0PatchesItems0CombineVariablesItems0], default is Undefined, required
        Variables are the list of variables whose values will be retrieved and
        combined.
    """


    strategy: "string"

    string?: ApiextensionsCrossplaneIoV1CompositionRevisionSpecPatchSetsItems0PatchesItems0CombineString

    variables: [ApiextensionsCrossplaneIoV1CompositionRevisionSpecPatchSetsItems0PatchesItems0CombineVariablesItems0]


    check:
        len(variables) >= 1


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecPatchSetsItems0PatchesItems0CombineString:
    """
    String declares that input variables should be combined into a single
    string, using the relevant settings for formatting purposes.

    Attributes
    ----------
    fmt : str, default is Undefined, required
        Format the input using a Go format string. See
        https://golang.org/pkg/fmt/ for details.
    """


    fmt: str


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecPatchSetsItems0PatchesItems0CombineVariablesItems0:
    """
    A CombineVariable defines the source of a value that is combined with
    others to form and patch an output value. Currently, this only supports
    retrieving values from a field path.

    Attributes
    ----------
    fromFieldPath : str, default is Undefined, required
        FromFieldPath is the path of the field on the source whose value is
        to be used as input.
    """


    fromFieldPath: str


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecPatchSetsItems0PatchesItems0Policy:
    """
    Policy configures the specifics of patching behaviour.

    Attributes
    ----------
    fromFieldPath : str, default is Undefined, optional
        FromFieldPath specifies how to patch from a field path. The default is
        'Optional', which means the patch will be a no-op if the specified
        fromFieldPath does not exist. Use 'Required' if the patch should fail if
        the specified path does not exist.
    mergeOptions : ApiextensionsCrossplaneIoV1CompositionRevisionSpecPatchSetsItems0PatchesItems0PolicyMergeOptions, default is Undefined, optional
        merge options
    """


    fromFieldPath?: "Optional" | "Required"

    mergeOptions?: ApiextensionsCrossplaneIoV1CompositionRevisionSpecPatchSetsItems0PatchesItems0PolicyMergeOptions


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecPatchSetsItems0PatchesItems0PolicyMergeOptions:
    """
    MergeOptions Specifies merge options on a field path.

    Attributes
    ----------
    appendSlice : bool, default is Undefined, optional
        Specifies that already existing elements in a merged slice should be preserved
    keepMapValues : bool, default is Undefined, optional
        Specifies that already existing values in a merged map should be preserved
    """


    appendSlice?: bool

    keepMapValues?: bool


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecPatchSetsItems0PatchesItems0TransformsItems0:
    """
    Transform is a unit of process whose input is transformed into an output with
    the supplied configuration.

    Attributes
    ----------
    convert : ApiextensionsCrossplaneIoV1CompositionRevisionSpecPatchSetsItems0PatchesItems0TransformsItems0Convert, default is Undefined, optional
        convert
    $map : {str:any}, default is Undefined, optional
        Map uses the input as a key in the given map and returns the value.
    match : ApiextensionsCrossplaneIoV1CompositionRevisionSpecPatchSetsItems0PatchesItems0TransformsItems0Match, default is Undefined, optional
        match
    math : ApiextensionsCrossplaneIoV1CompositionRevisionSpecPatchSetsItems0PatchesItems0TransformsItems0Math, default is Undefined, optional
        math
    string : ApiextensionsCrossplaneIoV1CompositionRevisionSpecPatchSetsItems0PatchesItems0TransformsItems0String, default is Undefined, optional
        string
    $type : str, default is Undefined, required
        Type of the transform to be run.
    """


    convert?: ApiextensionsCrossplaneIoV1CompositionRevisionSpecPatchSetsItems0PatchesItems0TransformsItems0Convert

    $map?: {str:any}

    match?: ApiextensionsCrossplaneIoV1CompositionRevisionSpecPatchSetsItems0PatchesItems0TransformsItems0Match

    math?: ApiextensionsCrossplaneIoV1CompositionRevisionSpecPatchSetsItems0PatchesItems0TransformsItems0Math

    string?: ApiextensionsCrossplaneIoV1CompositionRevisionSpecPatchSetsItems0PatchesItems0TransformsItems0String

    $type: "map" | "match" | "math" | "string" | "convert"


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecPatchSetsItems0PatchesItems0TransformsItems0Convert:
    """
    Convert is used to cast the input into the given output type.

    Attributes
    ----------
    format : str, default is Undefined, optional
        The expected input format.


        * `quantity` - parses the input as a K8s [`resource.Quantity`](https://pkg.go.dev/k8s.io/apimachinery/pkg/api/resource#Quantity).
        Only used during `string -> float64` conversions.
        * `json` - parses the input as a JSON string.
        Only used during `string -> object` or `string -> list` conversions.


        If this property is null, the default conversion is applied.
    toType : str, default is Undefined, required
        ToType is the type of the output of this transform.
    """


    format?: "none" | "quantity" | "json"

    toType: "string" | "int" | "int64" | "bool" | "float64" | "object" | "array"


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecPatchSetsItems0PatchesItems0TransformsItems0Match:
    """
    Match is a more complex version of Map that matches a list of patterns.

    Attributes
    ----------
    fallbackTo : str, default is "Value", optional
        Determines to what value the transform should fallback if no pattern matches.
    fallbackValue : any, default is Undefined, optional
        The fallback value that should be returned by the transform if now pattern
        matches.
    patterns : [ApiextensionsCrossplaneIoV1CompositionRevisionSpecPatchSetsItems0PatchesItems0TransformsItems0MatchPatternsItems0], default is Undefined, optional
        The patterns that should be tested against the input string.
        Patterns are tested in order. The value of the first match is used as
        result of this transform.
    """


    fallbackTo?: "Value" | "Input" = "Value"

    fallbackValue?: any

    patterns?: [ApiextensionsCrossplaneIoV1CompositionRevisionSpecPatchSetsItems0PatchesItems0TransformsItems0MatchPatternsItems0]


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecPatchSetsItems0PatchesItems0TransformsItems0MatchPatternsItems0:
    """
    MatchTransformPattern is a transform that returns the value that matches a
    pattern.

    Attributes
    ----------
    literal : str, default is Undefined, optional
        Literal exactly matches the input string (case sensitive).
        Is required if `type` is `literal`.
    regexp : str, default is Undefined, optional
        Regexp to match against the input string.
        Is required if `type` is `regexp`.
    result : any, default is Undefined, required
        The value that is used as result of the transform if the pattern matches.
    $type : str, default is "literal", required
        Type specifies how the pattern matches the input.


        * `literal` - the pattern value has to exactly match (case sensitive) the
        input string. This is the default.


        * `regexp` - the pattern treated as a regular expression against
        which the input string is tested. Crossplane will throw an error if the
        key is not a valid regexp.
    """


    literal?: str

    regexp?: str

    result: any

    $type: "literal" | "regexp" = "literal"


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecPatchSetsItems0PatchesItems0TransformsItems0Math:
    """
    Math is used to transform the input via mathematical operations such as
    multiplication.

    Attributes
    ----------
    clampMax : int, default is Undefined, optional
        ClampMax makes sure that the value is not bigger than the given value.
    clampMin : int, default is Undefined, optional
        ClampMin makes sure that the value is not smaller than the given value.
    multiply : int, default is Undefined, optional
        Multiply the value.
    $type : str, default is "Multiply", optional
        Type of the math transform to be run.
    """


    clampMax?: int

    clampMin?: int

    multiply?: int

    $type?: "Multiply" | "ClampMin" | "ClampMax" = "Multiply"


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecPatchSetsItems0PatchesItems0TransformsItems0String:
    """
    String is used to transform the input into a string or a different kind
    of string. Note that the input does not necessarily need to be a string.

    Attributes
    ----------
    convert : str, default is Undefined, optional
        Optional conversion method to be specified.
        `ToUpper` and `ToLower` change the letter case of the input string.
        `ToBase64` and `FromBase64` perform a base64 conversion based on the input string.
        `ToJson` converts any input value into its raw JSON representation.
        `ToSha1`, `ToSha256` and `ToSha512` generate a hash value based on the input
        converted to JSON.
        `ToAdler32` generate a addler32 hash based on the input string.
    fmt : str, default is Undefined, optional
        Format the input using a Go format string. See
        https://golang.org/pkg/fmt/ for details.
    join : ApiextensionsCrossplaneIoV1CompositionRevisionSpecPatchSetsItems0PatchesItems0TransformsItems0StringJoin, default is Undefined, optional
        join
    regexp : ApiextensionsCrossplaneIoV1CompositionRevisionSpecPatchSetsItems0PatchesItems0TransformsItems0StringRegexp, default is Undefined, optional
        regexp
    trim : str, default is Undefined, optional
        Trim the prefix or suffix from the input
    $type : str, default is "Format", optional
        Type of the string transform to be run.
    """


    convert?: "ToUpper" | "ToLower" | "ToBase64" | "FromBase64" | "ToJson" | "ToSha1" | "ToSha256" | "ToSha512" | "ToAdler32"

    fmt?: str

    join?: ApiextensionsCrossplaneIoV1CompositionRevisionSpecPatchSetsItems0PatchesItems0TransformsItems0StringJoin

    regexp?: ApiextensionsCrossplaneIoV1CompositionRevisionSpecPatchSetsItems0PatchesItems0TransformsItems0StringRegexp

    trim?: str

    $type?: "Format" | "Convert" | "TrimPrefix" | "TrimSuffix" | "Regexp" | "Join" = "Format"


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecPatchSetsItems0PatchesItems0TransformsItems0StringJoin:
    """
    Join defines parameters to join a slice of values to a string.

    Attributes
    ----------
    separator : str, default is Undefined, required
        Separator defines the character that should separate the values from each
        other in the joined string.
    """


    separator: str


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecPatchSetsItems0PatchesItems0TransformsItems0StringRegexp:
    """
    Extract a match from the input using a regular expression.

    Attributes
    ----------
    group : int, default is Undefined, optional
        Group number to match. 0 (the default) matches the entire expression.
    match : str, default is Undefined, required
        Match string. May optionally include submatches, aka capture groups.
        See https://pkg.go.dev/regexp/ for details.
    """


    group?: int

    match: str


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecPipelineItems0:
    """
    A PipelineStep in a Composition Function pipeline.

    Attributes
    ----------
    credentials : [ApiextensionsCrossplaneIoV1CompositionRevisionSpecPipelineItems0CredentialsItems0], default is Undefined, optional
        Credentials are optional credentials that the Composition Function needs.
    functionRef : ApiextensionsCrossplaneIoV1CompositionRevisionSpecPipelineItems0FunctionRef, default is Undefined, required
        function ref
    input : any, default is Undefined, optional
        Input is an optional, arbitrary Kubernetes resource (i.e. a resource
        with an apiVersion and kind) that will be passed to the Composition
        Function as the 'input' of its RunFunctionRequest.
    step : str, default is Undefined, required
        Step name. Must be unique within its Pipeline.
    """


    credentials?: [ApiextensionsCrossplaneIoV1CompositionRevisionSpecPipelineItems0CredentialsItems0]

    functionRef: ApiextensionsCrossplaneIoV1CompositionRevisionSpecPipelineItems0FunctionRef

    input?: any

    step: str


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecPipelineItems0CredentialsItems0:
    """
    FunctionCredentials are optional credentials that a Composition Function
    needs to run.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of this set of credentials.
    secretRef : ApiextensionsCrossplaneIoV1CompositionRevisionSpecPipelineItems0CredentialsItems0SecretRef, default is Undefined, optional
        secret ref
    source : str, default is Undefined, required
        Source of the function credentials.
    """


    name: str

    secretRef?: ApiextensionsCrossplaneIoV1CompositionRevisionSpecPipelineItems0CredentialsItems0SecretRef

    source: "None" | "Secret"


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecPipelineItems0CredentialsItems0SecretRef:
    """
    A SecretRef is a reference to a secret containing credentials that should
    be supplied to the function.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecPipelineItems0FunctionRef:
    """
    FunctionRef is a reference to the Composition Function this step should
    execute.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced Function.
    """


    name: str


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecPublishConnectionDetailsWithStoreConfigRef:
    """
    PublishConnectionDetailsWithStoreConfig specifies the secret store config
    with which the connection details of composite resources dynamically
    provisioned using this composition will be published.


    THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
    unless the relevant Crossplane feature flag is enabled, and may be
    changed or removed without notice.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced StoreConfig.
    """


    name: str


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0:
    """
    ComposedTemplate is used to provide information about how the composed resource
    should be processed.

    Attributes
    ----------
    base : any, default is Undefined, required
        Base is the target resource that the patches will be applied on.
    connectionDetails : [ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0ConnectionDetailsItems0], default is Undefined, optional
        ConnectionDetails lists the propagation secret keys from this target
        resource to the composition instance connection secret.
    name : str, default is Undefined, optional
        A Name uniquely identifies this entry within its Composition's resources
        array. Names are optional but *strongly* recommended. When all entries in
        the resources array are named entries may added, deleted, and reordered
        as long as their names do not change. When entries are not named the
        length and order of the resources array should be treated as immutable.
        Either all or no entries must be named.
    patches : [ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0PatchesItems0], default is Undefined, optional
        Patches will be applied as overlay to the base resource.
    readinessChecks : [ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0ReadinessChecksItems0], default is [{"matchCondition": {"status": "True", "type": "Ready"}, "type": "MatchCondition"}], optional
        ReadinessChecks allows users to define custom readiness checks. All checks
        have to return true in order for resource to be considered ready. The
        default readiness check is to have the "Ready" condition to be "True".
    """


    base: any

    connectionDetails?: [ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0ConnectionDetailsItems0]

    name?: str

    patches?: [ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0PatchesItems0]

    readinessChecks?: [ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0ReadinessChecksItems0] = [{"matchCondition": {"status": "True", "type": "Ready"}, "type": "MatchCondition"}]


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0ConnectionDetailsItems0:
    """
    ConnectionDetail includes the information about the propagation of the connection
    information from one secret to another.

    Attributes
    ----------
    fromConnectionSecretKey : str, default is Undefined, optional
        FromConnectionSecretKey is the key that will be used to fetch the value
        from the composed resource's connection secret.
    fromFieldPath : str, default is Undefined, optional
        FromFieldPath is the path of the field on the composed resource whose
        value to be used as input. Name must be specified if the type is
        FromFieldPath.
    name : str, default is Undefined, optional
        Name of the connection secret key that will be propagated to the
        connection secret of the composition instance. Leave empty if you'd like
        to use the same key name.
    $type : str, default is Undefined, optional
        Type sets the connection detail fetching behaviour to be used. Each
        connection detail type may require its own fields to be set on the
        ConnectionDetail object. If the type is omitted Crossplane will attempt
        to infer it based on which other fields were specified. If multiple
        fields are specified the order of precedence is:
        1. FromValue
        2. FromConnectionSecretKey
        3. FromFieldPath
    value : str, default is Undefined, optional
        Value that will be propagated to the connection secret of the composite
        resource. May be set to inject a fixed, non-sensitive connection secret
        value, for example a well-known port.
    """


    fromConnectionSecretKey?: str

    fromFieldPath?: str

    name?: str

    $type?: "FromConnectionSecretKey" | "FromFieldPath" | "FromValue"

    value?: str


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0PatchesItems0:
    """
    Patch objects are applied between composite and composed resources. Their
    behaviour depends on the Type selected. The default Type,
    FromCompositeFieldPath, copies a value from the composite resource to
    the composed resource, applying any defined transformers.

    Attributes
    ----------
    combine : ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0PatchesItems0Combine, default is Undefined, optional
        combine
    fromFieldPath : str, default is Undefined, optional
        FromFieldPath is the path of the field on the resource whose value is
        to be used as input. Required when type is FromCompositeFieldPath,
        FromEnvironmentFieldPath, ToCompositeFieldPath, ToEnvironmentFieldPath.
    patchSetName : str, default is Undefined, optional
        PatchSetName to include patches from. Required when type is PatchSet.
    policy : ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0PatchesItems0Policy, default is Undefined, optional
        policy
    toFieldPath : str, default is Undefined, optional
        ToFieldPath is the path of the field on the resource whose value will
        be changed with the result of transforms. Leave empty if you'd like to
        propagate to the same path as fromFieldPath.
    transforms : [ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0PatchesItems0TransformsItems0], default is Undefined, optional
        Transforms are the list of functions that are used as a FIFO pipe for the
        input to be transformed.
    $type : str, default is "FromCompositeFieldPath", optional
        Type sets the patching behaviour to be used. Each patch type may require
        its own fields to be set on the Patch object.
    """


    combine?: ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0PatchesItems0Combine

    fromFieldPath?: str

    patchSetName?: str

    policy?: ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0PatchesItems0Policy

    toFieldPath?: str

    transforms?: [ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0PatchesItems0TransformsItems0]

    $type?: "FromCompositeFieldPath" | "FromEnvironmentFieldPath" | "PatchSet" | "ToCompositeFieldPath" | "ToEnvironmentFieldPath" | "CombineFromEnvironment" | "CombineFromComposite" | "CombineToComposite" | "CombineToEnvironment" = "FromCompositeFieldPath"


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0PatchesItems0Combine:
    """
    Combine is the patch configuration for a CombineFromComposite,
    CombineFromEnvironment, CombineToComposite or CombineToEnvironment patch.

    Attributes
    ----------
    strategy : str, default is Undefined, required
        Strategy defines the strategy to use to combine the input variable values.
        Currently only string is supported.
    string : ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0PatchesItems0CombineString, default is Undefined, optional
        string
    variables : [ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0PatchesItems0CombineVariablesItems0], default is Undefined, required
        Variables are the list of variables whose values will be retrieved and
        combined.
    """


    strategy: "string"

    string?: ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0PatchesItems0CombineString

    variables: [ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0PatchesItems0CombineVariablesItems0]


    check:
        len(variables) >= 1


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0PatchesItems0CombineString:
    """
    String declares that input variables should be combined into a single
    string, using the relevant settings for formatting purposes.

    Attributes
    ----------
    fmt : str, default is Undefined, required
        Format the input using a Go format string. See
        https://golang.org/pkg/fmt/ for details.
    """


    fmt: str


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0PatchesItems0CombineVariablesItems0:
    """
    A CombineVariable defines the source of a value that is combined with
    others to form and patch an output value. Currently, this only supports
    retrieving values from a field path.

    Attributes
    ----------
    fromFieldPath : str, default is Undefined, required
        FromFieldPath is the path of the field on the source whose value is
        to be used as input.
    """


    fromFieldPath: str


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0PatchesItems0Policy:
    """
    Policy configures the specifics of patching behaviour.

    Attributes
    ----------
    fromFieldPath : str, default is Undefined, optional
        FromFieldPath specifies how to patch from a field path. The default is
        'Optional', which means the patch will be a no-op if the specified
        fromFieldPath does not exist. Use 'Required' if the patch should fail if
        the specified path does not exist.
    mergeOptions : ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0PatchesItems0PolicyMergeOptions, default is Undefined, optional
        merge options
    """


    fromFieldPath?: "Optional" | "Required"

    mergeOptions?: ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0PatchesItems0PolicyMergeOptions


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0PatchesItems0PolicyMergeOptions:
    """
    MergeOptions Specifies merge options on a field path.

    Attributes
    ----------
    appendSlice : bool, default is Undefined, optional
        Specifies that already existing elements in a merged slice should be preserved
    keepMapValues : bool, default is Undefined, optional
        Specifies that already existing values in a merged map should be preserved
    """


    appendSlice?: bool

    keepMapValues?: bool


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0PatchesItems0TransformsItems0:
    """
    Transform is a unit of process whose input is transformed into an output with
    the supplied configuration.

    Attributes
    ----------
    convert : ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0PatchesItems0TransformsItems0Convert, default is Undefined, optional
        convert
    $map : {str:any}, default is Undefined, optional
        Map uses the input as a key in the given map and returns the value.
    match : ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0PatchesItems0TransformsItems0Match, default is Undefined, optional
        match
    math : ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0PatchesItems0TransformsItems0Math, default is Undefined, optional
        math
    string : ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0PatchesItems0TransformsItems0String, default is Undefined, optional
        string
    $type : str, default is Undefined, required
        Type of the transform to be run.
    """


    convert?: ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0PatchesItems0TransformsItems0Convert

    $map?: {str:any}

    match?: ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0PatchesItems0TransformsItems0Match

    math?: ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0PatchesItems0TransformsItems0Math

    string?: ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0PatchesItems0TransformsItems0String

    $type: "map" | "match" | "math" | "string" | "convert"


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0PatchesItems0TransformsItems0Convert:
    """
    Convert is used to cast the input into the given output type.

    Attributes
    ----------
    format : str, default is Undefined, optional
        The expected input format.


        * `quantity` - parses the input as a K8s [`resource.Quantity`](https://pkg.go.dev/k8s.io/apimachinery/pkg/api/resource#Quantity).
        Only used during `string -> float64` conversions.
        * `json` - parses the input as a JSON string.
        Only used during `string -> object` or `string -> list` conversions.


        If this property is null, the default conversion is applied.
    toType : str, default is Undefined, required
        ToType is the type of the output of this transform.
    """


    format?: "none" | "quantity" | "json"

    toType: "string" | "int" | "int64" | "bool" | "float64" | "object" | "array"


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0PatchesItems0TransformsItems0Match:
    """
    Match is a more complex version of Map that matches a list of patterns.

    Attributes
    ----------
    fallbackTo : str, default is "Value", optional
        Determines to what value the transform should fallback if no pattern matches.
    fallbackValue : any, default is Undefined, optional
        The fallback value that should be returned by the transform if now pattern
        matches.
    patterns : [ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0PatchesItems0TransformsItems0MatchPatternsItems0], default is Undefined, optional
        The patterns that should be tested against the input string.
        Patterns are tested in order. The value of the first match is used as
        result of this transform.
    """


    fallbackTo?: "Value" | "Input" = "Value"

    fallbackValue?: any

    patterns?: [ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0PatchesItems0TransformsItems0MatchPatternsItems0]


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0PatchesItems0TransformsItems0MatchPatternsItems0:
    """
    MatchTransformPattern is a transform that returns the value that matches a
    pattern.

    Attributes
    ----------
    literal : str, default is Undefined, optional
        Literal exactly matches the input string (case sensitive).
        Is required if `type` is `literal`.
    regexp : str, default is Undefined, optional
        Regexp to match against the input string.
        Is required if `type` is `regexp`.
    result : any, default is Undefined, required
        The value that is used as result of the transform if the pattern matches.
    $type : str, default is "literal", required
        Type specifies how the pattern matches the input.


        * `literal` - the pattern value has to exactly match (case sensitive) the
        input string. This is the default.


        * `regexp` - the pattern treated as a regular expression against
        which the input string is tested. Crossplane will throw an error if the
        key is not a valid regexp.
    """


    literal?: str

    regexp?: str

    result: any

    $type: "literal" | "regexp" = "literal"


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0PatchesItems0TransformsItems0Math:
    """
    Math is used to transform the input via mathematical operations such as
    multiplication.

    Attributes
    ----------
    clampMax : int, default is Undefined, optional
        ClampMax makes sure that the value is not bigger than the given value.
    clampMin : int, default is Undefined, optional
        ClampMin makes sure that the value is not smaller than the given value.
    multiply : int, default is Undefined, optional
        Multiply the value.
    $type : str, default is "Multiply", optional
        Type of the math transform to be run.
    """


    clampMax?: int

    clampMin?: int

    multiply?: int

    $type?: "Multiply" | "ClampMin" | "ClampMax" = "Multiply"


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0PatchesItems0TransformsItems0String:
    """
    String is used to transform the input into a string or a different kind
    of string. Note that the input does not necessarily need to be a string.

    Attributes
    ----------
    convert : str, default is Undefined, optional
        Optional conversion method to be specified.
        `ToUpper` and `ToLower` change the letter case of the input string.
        `ToBase64` and `FromBase64` perform a base64 conversion based on the input string.
        `ToJson` converts any input value into its raw JSON representation.
        `ToSha1`, `ToSha256` and `ToSha512` generate a hash value based on the input
        converted to JSON.
        `ToAdler32` generate a addler32 hash based on the input string.
    fmt : str, default is Undefined, optional
        Format the input using a Go format string. See
        https://golang.org/pkg/fmt/ for details.
    join : ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0PatchesItems0TransformsItems0StringJoin, default is Undefined, optional
        join
    regexp : ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0PatchesItems0TransformsItems0StringRegexp, default is Undefined, optional
        regexp
    trim : str, default is Undefined, optional
        Trim the prefix or suffix from the input
    $type : str, default is "Format", optional
        Type of the string transform to be run.
    """


    convert?: "ToUpper" | "ToLower" | "ToBase64" | "FromBase64" | "ToJson" | "ToSha1" | "ToSha256" | "ToSha512" | "ToAdler32"

    fmt?: str

    join?: ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0PatchesItems0TransformsItems0StringJoin

    regexp?: ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0PatchesItems0TransformsItems0StringRegexp

    trim?: str

    $type?: "Format" | "Convert" | "TrimPrefix" | "TrimSuffix" | "Regexp" | "Join" = "Format"


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0PatchesItems0TransformsItems0StringJoin:
    """
    Join defines parameters to join a slice of values to a string.

    Attributes
    ----------
    separator : str, default is Undefined, required
        Separator defines the character that should separate the values from each
        other in the joined string.
    """


    separator: str


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0PatchesItems0TransformsItems0StringRegexp:
    """
    Extract a match from the input using a regular expression.

    Attributes
    ----------
    group : int, default is Undefined, optional
        Group number to match. 0 (the default) matches the entire expression.
    match : str, default is Undefined, required
        Match string. May optionally include submatches, aka capture groups.
        See https://pkg.go.dev/regexp/ for details.
    """


    group?: int

    match: str


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0ReadinessChecksItems0:
    """
    ReadinessCheck is used to indicate how to tell whether a resource is ready
    for consumption.

    Attributes
    ----------
    fieldPath : str, default is Undefined, optional
        FieldPath shows the path of the field whose value will be used.
    matchCondition : ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0ReadinessChecksItems0MatchCondition, default is Undefined, optional
        match condition
    matchInteger : int, default is Undefined, optional
        MatchInt is the value you'd like to match if you're using "MatchInt" type.
    matchString : str, default is Undefined, optional
        MatchString is the value you'd like to match if you're using "MatchString" type.
    $type : str, default is Undefined, required
        Type indicates the type of probe you'd like to use.
    """


    fieldPath?: str

    matchCondition?: ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0ReadinessChecksItems0MatchCondition

    matchInteger?: int

    matchString?: str

    $type: "MatchString" | "MatchInteger" | "NonEmpty" | "MatchCondition" | "MatchTrue" | "MatchFalse" | "None"


schema ApiextensionsCrossplaneIoV1CompositionRevisionSpecResourcesItems0ReadinessChecksItems0MatchCondition:
    """
    MatchCondition specifies the condition you'd like to match if you're using "MatchCondition" type.

    Attributes
    ----------
    status : str, default is "True", required
        Status is the status of the condition you'd like to match.
    $type : str, default is "Ready", required
        Type indicates the type of condition you'd like to use.
    """


    status: str = "True"

    $type: str = "Ready"


schema ApiextensionsCrossplaneIoV1CompositionRevisionStatus:
    """
    CompositionRevisionStatus shows the observed state of the composition
    revision.

    Attributes
    ----------
    conditions : [ApiextensionsCrossplaneIoV1CompositionRevisionStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    """


    conditions?: [ApiextensionsCrossplaneIoV1CompositionRevisionStatusConditionsItems0]


schema ApiextensionsCrossplaneIoV1CompositionRevisionStatusConditionsItems0:
    """
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


