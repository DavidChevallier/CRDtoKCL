"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema IngressRouteUDP:
    """
    IngressRouteUDP is a CRD implementation of a Traefik UDP Router.

    Attributes
    ----------
    apiVersion : str, default is "traefik.io/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "IngressRouteUDP", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, required
        metadata
    spec : TraefikIoV1alpha1IngressRouteUDPSpec, default is Undefined, required
        spec
    """


    apiVersion: "traefik.io/v1alpha1" = "traefik.io/v1alpha1"

    kind: "IngressRouteUDP" = "IngressRouteUDP"

    metadata: v1.ObjectMeta

    spec: TraefikIoV1alpha1IngressRouteUDPSpec


schema TraefikIoV1alpha1IngressRouteUDPSpec:
    """
    IngressRouteUDPSpec defines the desired state of a IngressRouteUDP.

    Attributes
    ----------
    entryPoints : [str], default is Undefined, optional
        EntryPoints defines the list of entry point names to bind to.
        Entry points have to be configured in the static configuration.
        More info: https://doc.traefik.io/traefik/v3.0/routing/entrypoints/
        Default: all.
    routes : [TraefikIoV1alpha1IngressRouteUDPSpecRoutesItems0], default is Undefined, required
        Routes defines the list of routes.
    """


    entryPoints?: [str]

    routes: [TraefikIoV1alpha1IngressRouteUDPSpecRoutesItems0]


schema TraefikIoV1alpha1IngressRouteUDPSpecRoutesItems0:
    """
    RouteUDP holds the UDP route configuration.

    Attributes
    ----------
    services : [TraefikIoV1alpha1IngressRouteUDPSpecRoutesItems0ServicesItems0], default is Undefined, optional
        Services defines the list of UDP services.
    """


    services?: [TraefikIoV1alpha1IngressRouteUDPSpecRoutesItems0ServicesItems0]


schema TraefikIoV1alpha1IngressRouteUDPSpecRoutesItems0ServicesItems0:
    """
    ServiceUDP defines an upstream UDP service to proxy traffic to.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name defines the name of the referenced Kubernetes Service.
    namespace : str, default is Undefined, optional
        Namespace defines the namespace of the referenced Kubernetes Service.
    nativeLB : bool, default is Undefined, optional
        NativeLB controls, when creating the load-balancer,
        whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.
        The Kubernetes Service itself does load-balance to the pods.
        By default, NativeLB is false.
    nodePortLB : bool, default is Undefined, optional
        NodePortLB controls, when creating the load-balancer,
        whether the LB's children are directly the nodes internal IPs using the nodePort when the service type is NodePort.
        It allows services to be reachable when Traefik runs externally from the Kubernetes cluster but within the same network of the nodes.
        By default, NodePortLB is false.
    port : int | str, default is Undefined, required
        Port defines the port of a Kubernetes Service.
        This can be a reference to a named port.
    weight : int, default is Undefined, optional
        Weight defines the weight used when balancing requests between multiple Kubernetes Service.
    """


    name: str

    namespace?: str

    nativeLB?: bool

    nodePortLB?: bool

    port: int | str

    weight?: int


