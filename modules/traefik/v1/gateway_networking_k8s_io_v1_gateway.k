"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import regex
import k8s.apimachinery.pkg.apis.meta.v1
regex_match = regex.match


schema Gateway:
    """
    Gateway represents an instance of a service-traffic handling infrastructure by binding Listeners to a set of IP addresses.

    Attributes
    ----------
    apiVersion : str, default is "gateway.networking.k8s.io/v1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Gateway", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : GatewayNetworkingK8sIoV1GatewaySpec, default is Undefined, required
        spec
    status : GatewayNetworkingK8sIoV1GatewayStatus, default is Undefined, optional
        status
    """


    apiVersion: "gateway.networking.k8s.io/v1" = "gateway.networking.k8s.io/v1"

    kind: "Gateway" = "Gateway"

    metadata?: v1.ObjectMeta

    spec: GatewayNetworkingK8sIoV1GatewaySpec

    status?: GatewayNetworkingK8sIoV1GatewayStatus


schema GatewayNetworkingK8sIoV1GatewaySpec:
    """
    Spec defines the desired state of Gateway.

    Attributes
    ----------
    addresses : [GatewayNetworkingK8sIoV1GatewaySpecAddressesItems0], default is Undefined, optional
        Addresses requested for this Gateway. This is optional and behavior can depend on the implementation. If a value is set in the spec and the requested address is invalid or unavailable, the implementation MUST indicate this in the associated entry in GatewayStatus.Addresses. 
         The Addresses field represents a request for the address(es) on the "outside of the Gateway", that traffic bound for this Gateway will use. This could be the IP address or hostname of an external load balancer or other networking infrastructure, or some other address that traffic will be sent to. 
         If no Addresses are specified, the implementation MAY schedule the Gateway in an implementation-specific manner, assigning an appropriate set of Addresses. 
         The implementation MUST bind all Listeners to every GatewayAddress that it assigns to the Gateway and add a corresponding entry in GatewayStatus.Addresses. 
         Support: Extended 
         
    gatewayClassName : str, default is Undefined, required
        GatewayClassName used for this Gateway. This is the name of a GatewayClass resource.
    infrastructure : GatewayNetworkingK8sIoV1GatewaySpecInfrastructure, default is Undefined, optional
        infrastructure
    listeners : [GatewayNetworkingK8sIoV1GatewaySpecListenersItems0], default is Undefined, required
        Listeners associated with this Gateway. Listeners define logical endpoints that are bound on this Gateway's addresses. At least one Listener MUST be specified. 
         Each Listener in a set of Listeners (for example, in a single Gateway) MUST be _distinct_, in that a traffic flow MUST be able to be assigned to exactly one listener. (This section uses "set of Listeners" rather than "Listeners in a single Gateway" because implementations MAY merge configuration from multiple Gateways onto a single data plane, and these rules _also_ apply in that case). 
         Practically, this means that each listener in a set MUST have a unique combination of Port, Protocol, and, if supported by the protocol, Hostname. 
         Some combinations of port, protocol, and TLS settings are considered Core support and MUST be supported by implementations based on their targeted conformance profile: 
         HTTP Profile 
         1. HTTPRoute, Port: 80, Protocol: HTTP 2. HTTPRoute, Port: 443, Protocol: HTTPS, TLS Mode: Terminate, TLS keypair provided 
         TLS Profile 
         1. TLSRoute, Port: 443, Protocol: TLS, TLS Mode: Passthrough 
         "Distinct" Listeners have the following property: 
         The implementation can match inbound requests to a single distinct Listener. When multiple Listeners share values for fields (for example, two Listeners with the same Port value), the implementation can match requests to only one of the Listeners using other Listener fields. 
         For example, the following Listener scenarios are distinct: 
         1. Multiple Listeners with the same Port that all use the "HTTP" Protocol that all have unique Hostname values. 2. Multiple Listeners with the same Port that use either the "HTTPS" or "TLS" Protocol that all have unique Hostname values. 3. A mixture of "TCP" and "UDP" Protocol Listeners, where no Listener with the same Protocol has the same Port value. 
         Some fields in the Listener struct have possible values that affect whether the Listener is distinct. Hostname is particularly relevant for HTTP or HTTPS protocols. 
         When using the Hostname value to select between same-Port, same-Protocol Listeners, the Hostname value must be different on each Listener for the Listener to be distinct. 
         When the Listeners are distinct based on Hostname, inbound request hostnames MUST match from the most specific to least specific Hostname values to choose the correct Listener and its associated set of Routes. 
         Exact matches must be processed before wildcard matches, and wildcard matches must be processed before fallback (empty Hostname value) matches. For example, `"foo.example.com"` takes precedence over `"*.example.com"`, and `"*.example.com"` takes precedence over `""`. 
         Additionally, if there are multiple wildcard entries, more specific wildcard entries must be processed before less specific wildcard entries. For example, `"*.foo.example.com"` takes precedence over `"*.example.com"`. The precise definition here is that the higher the number of dots in the hostname to the right of the wildcard character, the higher the precedence. 
         The wildcard character will match any number of characters _and dots_ to the left, however, so `"*.example.com"` will match both `"foo.bar.example.com"` _and_ `"bar.example.com"`. 
         If a set of Listeners contains Listeners that are not distinct, then those Listeners are Conflicted, and the implementation MUST set the "Conflicted" condition in the Listener Status to "True". 
         Implementations MAY choose to accept a Gateway with some Conflicted Listeners only if they only accept the partial Listener set that contains no Conflicted Listeners. To put this another way, implementations may accept a partial Listener set only if they throw out *all* the conflicting Listeners. No picking one of the conflicting listeners as the winner. This also means that the Gateway must have at least one non-conflicting Listener in this case, otherwise it violates the requirement that at least one Listener must be present. 
         The implementation MUST set a "ListenersNotValid" condition on the Gateway Status when the Gateway contains Conflicted Listeners whether or not they accept the Gateway. That Condition SHOULD clearly indicate in the Message which Listeners are conflicted, and which are Accepted. Additionally, the Listener status for those listeners SHOULD indicate which Listeners are conflicted and not Accepted. 
         A Gateway's Listeners are considered "compatible" if: 
         1. They are distinct. 2. The implementation can serve them in compliance with the Addresses requirement that all Listeners are available on all assigned addresses. 
         Compatible combinations in Extended support are expected to vary across implementations. A combination that is compatible for one implementation may not be compatible for another. 
         For example, an implementation that cannot serve both TCP and UDP listeners on the same address, or cannot mix HTTPS and generic TLS listens on the same port would not consider those cases compatible, even though they are distinct. 
         Note that requests SHOULD match at most one Listener. For example, if Listeners are defined for "foo.example.com" and "*.example.com", a request to "foo.example.com" SHOULD only be routed using routes attached to the "foo.example.com" Listener (and not the "*.example.com" Listener). This concept is known as "Listener Isolation". Implementations that do not support Listener Isolation MUST clearly document this. 
         Implementations MAY merge separate Gateways onto a single set of Addresses if all Listeners across all Gateways are compatible. 
         Support: Core
    """


    addresses?: [GatewayNetworkingK8sIoV1GatewaySpecAddressesItems0]

    gatewayClassName: str

    infrastructure?: GatewayNetworkingK8sIoV1GatewaySpecInfrastructure

    listeners: [GatewayNetworkingK8sIoV1GatewaySpecListenersItems0]


    check:
        len(addresses) <= 16
        len(gatewayClassName) <= 253
        len(gatewayClassName) >= 1
        len(listeners) >= 1
        len(listeners) <= 64


schema GatewayNetworkingK8sIoV1GatewaySpecAddressesItems0:
    """
    GatewayAddress describes an address that can be bound to a Gateway.

    Attributes
    ----------
    $type : str, default is "IPAddress", optional
        Type of the address.
    value : str, default is Undefined, required
        Value of the address. The validity of the values will depend on the type and support by the controller. 
         Examples: `1.2.3.4`, `128::1`, `my-ip-address`.
    """


    $type?: str = "IPAddress"

    value: str


    check:
        len($type) <= 253
        len($type) >= 1
        regex_match(str($type), r"^Hostname|IPAddress|NamedAddress|[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*\/[A-Za-z0-9\/\-._~%!$&'()*+,;=:]+$") if $type
        len(value) <= 253
        len(value) >= 1


schema GatewayNetworkingK8sIoV1GatewaySpecInfrastructure:
    """
    Infrastructure defines infrastructure level attributes about this Gateway instance. 
     Support: Core 
     

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations that SHOULD be applied to any resources created in response to this Gateway. 
         For implementations creating other Kubernetes objects, this should be the `metadata.annotations` field on resources. For other implementations, this refers to any relevant (implementation specific) "annotations" concepts. 
         An implementation may chose to add additional implementation-specific annotations as they see fit. 
         Support: Extended
    labels : {str:str}, default is Undefined, optional
        Labels that SHOULD be applied to any resources created in response to this Gateway. 
         For implementations creating other Kubernetes objects, this should be the `metadata.labels` field on resources. For other implementations, this refers to any relevant (implementation specific) "labels" concepts. 
         An implementation may chose to add additional implementation-specific labels as they see fit. 
         Support: Extended
    """


    annotations?: {str:str}

    labels?: {str:str}


    check:
        all _, annotations in annotations {len(annotations) <= 4096len(annotations) >= 0 } if annotations
        all _, labels in labels {len(labels) <= 4096len(labels) >= 0 } if labels


schema GatewayNetworkingK8sIoV1GatewaySpecListenersItems0:
    """
    Listener embodies the concept of a logical endpoint where a Gateway accepts network connections.

    Attributes
    ----------
    allowedRoutes : GatewayNetworkingK8sIoV1GatewaySpecListenersItems0AllowedRoutes, default is Undefined, optional
        allowed routes
    hostname : str, default is Undefined, optional
        Hostname specifies the virtual hostname to match for protocol types that define this concept. When unspecified, all hostnames are matched. This field is ignored for protocols that don't require hostname based matching. 
         Implementations MUST apply Hostname matching appropriately for each of the following protocols: 
         * TLS: The Listener Hostname MUST match the SNI. * HTTP: The Listener Hostname MUST match the Host header of the request. * HTTPS: The Listener Hostname SHOULD match at both the TLS and HTTP protocol layers as described above. If an implementation does not ensure that both the SNI and Host header match the Listener hostname, it MUST clearly document that. 
         For HTTPRoute and TLSRoute resources, there is an interaction with the `spec.hostnames` array. When both listener and route specify hostnames, there MUST be an intersection between the values for a Route to be accepted. For more information, refer to the Route specific Hostnames documentation. 
         Hostnames that are prefixed with a wildcard label (`*.`) are interpreted as a suffix match. That means that a match for `*.example.com` would match both `test.example.com`, and `foo.test.example.com`, but not `example.com`. 
         Support: Core
    name : str, default is Undefined, required
        Name is the name of the Listener. This name MUST be unique within a Gateway. 
         Support: Core
    port : int, default is Undefined, required
        Port is the network port. Multiple listeners may use the same port, subject to the Listener compatibility rules. 
         Support: Core
    $protocol : str, default is Undefined, required
        Protocol specifies the network protocol this listener expects to receive. 
         Support: Core
    tls : GatewayNetworkingK8sIoV1GatewaySpecListenersItems0TLS, default is Undefined, optional
        tls
    """


    allowedRoutes?: GatewayNetworkingK8sIoV1GatewaySpecListenersItems0AllowedRoutes

    hostname?: str

    name: str

    port: int

    $protocol: str

    tls?: GatewayNetworkingK8sIoV1GatewaySpecListenersItems0TLS


    check:
        len(hostname) <= 253
        len(hostname) >= 1
        regex_match(str(hostname), r"^(\*\.)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if hostname
        len(name) <= 253
        len(name) >= 1
        regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$")
        port <= 65535
        port >= 1
        len($protocol) <= 255
        len($protocol) >= 1
        regex_match(str($protocol), r"^[a-zA-Z0-9]([-a-zSA-Z0-9]*[a-zA-Z0-9])?$|[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*\/[A-Za-z0-9]+$")


schema GatewayNetworkingK8sIoV1GatewaySpecListenersItems0AllowedRoutes:
    """
    AllowedRoutes defines the types of routes that MAY be attached to a Listener and the trusted namespaces where those Route resources MAY be present. 
     Although a client request may match multiple route rules, only one rule may ultimately receive the request. Matching precedence MUST be determined in order of the following criteria: 
     * The most specific match as defined by the Route type. * The oldest Route based on creation timestamp. For example, a Route with a creation timestamp of "2020-09-08 01:02:03" is given precedence over a Route with a creation timestamp of "2020-09-08 01:02:04". * If everything else is equivalent, the Route appearing first in alphabetical order (namespace/name) should be given precedence. For example, foo/bar is given precedence over foo/baz. 
     All valid rules within a Route attached to this Listener should be implemented. Invalid Route rules can be ignored (sometimes that will mean the full Route). If a Route rule transitions from valid to invalid, support for that Route rule should be dropped to ensure consistency. For example, even if a filter specified by a Route rule is invalid, the rest of the rules within that Route should still be supported. 
     Support: Core

    Attributes
    ----------
    kinds : [GatewayNetworkingK8sIoV1GatewaySpecListenersItems0AllowedRoutesKindsItems0], default is Undefined, optional
        Kinds specifies the groups and kinds of Routes that are allowed to bind to this Gateway Listener. When unspecified or empty, the kinds of Routes selected are determined using the Listener protocol. 
         A RouteGroupKind MUST correspond to kinds of Routes that are compatible with the application protocol specified in the Listener's Protocol field. If an implementation does not support or recognize this resource type, it MUST set the "ResolvedRefs" condition to False for this Listener with the "InvalidRouteKinds" reason. 
         Support: Core
    namespaces : GatewayNetworkingK8sIoV1GatewaySpecListenersItems0AllowedRoutesNamespaces, default is Undefined, optional
        namespaces
    """


    kinds?: [GatewayNetworkingK8sIoV1GatewaySpecListenersItems0AllowedRoutesKindsItems0]

    namespaces?: GatewayNetworkingK8sIoV1GatewaySpecListenersItems0AllowedRoutesNamespaces


    check:
        len(kinds) <= 8


schema GatewayNetworkingK8sIoV1GatewaySpecListenersItems0AllowedRoutesKindsItems0:
    """
    RouteGroupKind indicates the group and kind of a Route resource.

    Attributes
    ----------
    group : str, default is "gateway.networking.k8s.io", optional
        Group is the group of the Route.
    kind : str, default is Undefined, required
        Kind is the kind of the Route.
    """


    group?: str = "gateway.networking.k8s.io"

    kind: str


    check:
        len(group) <= 253
        regex_match(str(group), r"^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if group
        len(kind) <= 63
        len(kind) >= 1
        regex_match(str(kind), r"^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$")


schema GatewayNetworkingK8sIoV1GatewaySpecListenersItems0AllowedRoutesNamespaces:
    """
    Namespaces indicates namespaces from which Routes may be attached to this Listener. This is restricted to the namespace of this Gateway by default. 
     Support: Core

    Attributes
    ----------
    from : str, default is "Same", optional
        From indicates where Routes will be selected for this Gateway. Possible values are: 
         * All: Routes in all namespaces may be used by this Gateway. * Selector: Routes in namespaces selected by the selector may be used by this Gateway. * Same: Only Routes in the same namespace may be used by this Gateway. 
         Support: Core
    selector : GatewayNetworkingK8sIoV1GatewaySpecListenersItems0AllowedRoutesNamespacesSelector, default is Undefined, optional
        selector
    """


    from?: "All" | "Selector" | "Same" = "Same"

    selector?: GatewayNetworkingK8sIoV1GatewaySpecListenersItems0AllowedRoutesNamespacesSelector


schema GatewayNetworkingK8sIoV1GatewaySpecListenersItems0AllowedRoutesNamespacesSelector:
    """
    Selector must be specified when From is set to "Selector". In that case, only Routes in Namespaces matching this Selector will be selected by this Gateway. This field is ignored for other values of "From". 
     Support: Core

    Attributes
    ----------
    matchExpressions : [GatewayNetworkingK8sIoV1GatewaySpecListenersItems0AllowedRoutesNamespacesSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [GatewayNetworkingK8sIoV1GatewaySpecListenersItems0AllowedRoutesNamespacesSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema GatewayNetworkingK8sIoV1GatewaySpecListenersItems0AllowedRoutesNamespacesSelectorMatchExpressionsItems0:
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema GatewayNetworkingK8sIoV1GatewaySpecListenersItems0TLS:
    """
    TLS is the TLS configuration for the Listener. This field is required if the Protocol field is "HTTPS" or "TLS". It is invalid to set this field if the Protocol field is "HTTP", "TCP", or "UDP". 
     The association of SNIs to Certificate defined in GatewayTLSConfig is defined based on the Hostname field for this listener. 
     The GatewayClass MUST use the longest matching SNI out of all available certificates for any TLS handshake. 
     Support: Core

    Attributes
    ----------
    certificateRefs : [GatewayNetworkingK8sIoV1GatewaySpecListenersItems0TLSCertificateRefsItems0], default is Undefined, optional
        CertificateRefs contains a series of references to Kubernetes objects that contains TLS certificates and private keys. These certificates are used to establish a TLS handshake for requests that match the hostname of the associated listener. 
         A single CertificateRef to a Kubernetes Secret has "Core" support. Implementations MAY choose to support attaching multiple certificates to a Listener, but this behavior is implementation-specific. 
         References to a resource in different namespace are invalid UNLESS there is a ReferenceGrant in the target namespace that allows the certificate to be attached. If a ReferenceGrant does not allow this reference, the "ResolvedRefs" condition MUST be set to False for this listener with the "RefNotPermitted" reason. 
         This field is required to have at least one element when the mode is set to "Terminate" (default) and is optional otherwise. 
         CertificateRefs can reference to standard Kubernetes resources, i.e. Secret, or implementation-specific custom resources. 
         Support: Core - A single reference to a Kubernetes Secret of type kubernetes.io/tls 
         Support: Implementation-specific (More than one reference or other resource types)
    mode : str, default is "Terminate", optional
        Mode defines the TLS behavior for the TLS session initiated by the client. There are two possible modes: 
         - Terminate: The TLS session between the downstream client and the Gateway is terminated at the Gateway. This mode requires certificateRefs to be set and contain at least one element. - Passthrough: The TLS session is NOT terminated by the Gateway. This implies that the Gateway can't decipher the TLS stream except for the ClientHello message of the TLS protocol. CertificateRefs field is ignored in this mode. 
         Support: Core
    options : {str:str}, default is Undefined, optional
        Options are a list of key/value pairs to enable extended TLS configuration for each implementation. For example, configuring the minimum TLS version or supported cipher suites. 
         A set of common keys MAY be defined by the API in the future. To avoid any ambiguity, implementation-specific definitions MUST use domain-prefixed names, such as `example.com/my-custom-option`. Un-prefixed names are reserved for key names defined by Gateway API. 
         Support: Implementation-specific
    """


    certificateRefs?: [GatewayNetworkingK8sIoV1GatewaySpecListenersItems0TLSCertificateRefsItems0]

    mode?: "Terminate" | "Passthrough" = "Terminate"

    options?: {str:str}


    check:
        len(certificateRefs) <= 64
        all _, options in options {len(options) <= 4096len(options) >= 0 } if options


schema GatewayNetworkingK8sIoV1GatewaySpecListenersItems0TLSCertificateRefsItems0:
    """
    SecretObjectReference identifies an API object including its namespace, defaulting to Secret. 
     The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid. 
     References to objects with invalid Group and Kind are not valid, and must be rejected by the implementation, with appropriate Conditions set on the containing object.

    Attributes
    ----------
    group : str, default is Undefined, optional
        Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
    kind : str, default is "Secret", optional
        Kind is kind of the referent. For example "Secret".
    name : str, default is Undefined, required
        Name is the name of the referent.
    namespace : str, default is Undefined, optional
        Namespace is the namespace of the referenced object. When unspecified, the local namespace is inferred. 
         Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
         Support: Core
    """


    group?: str = ""

    kind?: str = "Secret"

    name: str

    namespace?: str


    check:
        len(group) <= 253
        regex_match(str(group), r"^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if group
        len(kind) <= 63
        len(kind) >= 1
        regex_match(str(kind), r"^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$") if kind
        len(name) <= 253
        len(name) >= 1
        len(namespace) <= 63
        len(namespace) >= 1
        regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace


schema GatewayNetworkingK8sIoV1GatewayStatus:
    """
    Status defines the current state of Gateway.

    Attributes
    ----------
    addresses : [GatewayNetworkingK8sIoV1GatewayStatusAddressesItems0], default is Undefined, optional
        Addresses lists the network addresses that have been bound to the Gateway. 
         This list may differ from the addresses provided in the spec under some conditions: 
         * no addresses are specified, all addresses are dynamically assigned * a combination of specified and dynamic addresses are assigned * a specified address was unusable (e.g. already in use) 
         
    conditions : [GatewayNetworkingK8sIoV1GatewayStatusConditionsItems0], default is [{"lastTransitionTime": "1970-01-01T00:00:00Z", "message": "Waiting for controller", "reason": "Pending", "status": "Unknown", "type": "Accepted"}, {"lastTransitionTime": "1970-01-01T00:00:00Z", "message": "Waiting for controller", "reason": "Pending", "status": "Unknown", "type": "Programmed"}], optional
        Conditions describe the current conditions of the Gateway. 
         Implementations should prefer to express Gateway conditions using the `GatewayConditionType` and `GatewayConditionReason` constants so that operators and tools can converge on a common vocabulary to describe Gateway state. 
         Known condition types are: 
         * "Accepted" * "Programmed" * "Ready"
    listeners : [GatewayNetworkingK8sIoV1GatewayStatusListenersItems0], default is Undefined, optional
        Listeners provide status for each unique listener port defined in the Spec.
    """


    addresses?: [GatewayNetworkingK8sIoV1GatewayStatusAddressesItems0]

    conditions?: [GatewayNetworkingK8sIoV1GatewayStatusConditionsItems0] = [{"lastTransitionTime": "1970-01-01T00:00:00Z", "message": "Waiting for controller", "reason": "Pending", "status": "Unknown", "type": "Accepted"}, {"lastTransitionTime": "1970-01-01T00:00:00Z", "message": "Waiting for controller", "reason": "Pending", "status": "Unknown", "type": "Programmed"}]

    listeners?: [GatewayNetworkingK8sIoV1GatewayStatusListenersItems0]


    check:
        len(addresses) <= 16
        len(conditions) <= 8
        len(listeners) <= 64


schema GatewayNetworkingK8sIoV1GatewayStatusAddressesItems0:
    """
    GatewayStatusAddress describes a network address that is bound to a Gateway.

    Attributes
    ----------
    $type : str, default is "IPAddress", optional
        Type of the address.
    value : str, default is Undefined, required
        Value of the address. The validity of the values will depend on the type and support by the controller. 
         Examples: `1.2.3.4`, `128::1`, `my-ip-address`.
    """


    $type?: str = "IPAddress"

    value: str


    check:
        len($type) <= 253
        len($type) >= 1
        regex_match(str($type), r"^Hostname|IPAddress|NamedAddress|[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*\/[A-Za-z0-9\/\-._~%!$&'()*+,;=:]+$") if $type
        len(value) <= 253
        len(value) >= 1


schema GatewayNetworkingK8sIoV1GatewayStatusConditionsItems0:
    """
    Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
     type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
     // other fields }

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
    message : str, default is Undefined, required
        message is a human readable message indicating details about the transition. This may be an empty string.
    observedGeneration : int, default is Undefined, optional
        observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
    reason : str, default is Undefined, required
        reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
    status : str, default is Undefined, required
        status of the condition, one of True, False, Unknown.
    $type : str, default is Undefined, required
        type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
    """


    lastTransitionTime: str

    message: str

    observedGeneration?: int

    reason: str

    status: "True" | "False" | "Unknown"

    $type: str


    check:
        len(message) <= 32768
        observedGeneration >= 0
        len(reason) <= 1024
        len(reason) >= 1
        regex_match(str(reason), r"^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$")
        len($type) <= 316
        regex_match(str($type), r"^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$")


schema GatewayNetworkingK8sIoV1GatewayStatusListenersItems0:
    """
    ListenerStatus is the status associated with a Listener.

    Attributes
    ----------
    attachedRoutes : int, default is Undefined, required
        AttachedRoutes represents the total number of Routes that have been successfully attached to this Listener. 
         Successful attachment of a Route to a Listener is based solely on the combination of the AllowedRoutes field on the corresponding Listener and the Route's ParentRefs field. A Route is successfully attached to a Listener when it is selected by the Listener's AllowedRoutes field AND the Route has a valid ParentRef selecting the whole Gateway resource or a specific Listener as a parent resource (more detail on attachment semantics can be found in the documentation on the various Route kinds ParentRefs fields). Listener or Route status does not impact successful attachment, i.e. the AttachedRoutes field count MUST be set for Listeners with condition Accepted: false and MUST count successfully attached Routes that may themselves have Accepted: false conditions. 
         Uses for this field include troubleshooting Route attachment and measuring blast radius/impact of changes to a Listener.
    conditions : [GatewayNetworkingK8sIoV1GatewayStatusListenersItems0ConditionsItems0], default is Undefined, required
        Conditions describe the current condition of this listener.
    name : str, default is Undefined, required
        Name is the name of the Listener that this status corresponds to.
    supportedKinds : [GatewayNetworkingK8sIoV1GatewayStatusListenersItems0SupportedKindsItems0], default is Undefined, required
        SupportedKinds is the list indicating the Kinds supported by this listener. This MUST represent the kinds an implementation supports for that Listener configuration. 
         If kinds are specified in Spec that are not supported, they MUST NOT appear in this list and an implementation MUST set the "ResolvedRefs" condition to "False" with the "InvalidRouteKinds" reason. If both valid and invalid Route kinds are specified, the implementation MUST reference the valid Route kinds that have been specified.
    """


    attachedRoutes: int

    conditions: [GatewayNetworkingK8sIoV1GatewayStatusListenersItems0ConditionsItems0]

    name: str

    supportedKinds: [GatewayNetworkingK8sIoV1GatewayStatusListenersItems0SupportedKindsItems0]


    check:
        len(conditions) <= 8
        len(name) <= 253
        len(name) >= 1
        regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$")
        len(supportedKinds) <= 8


schema GatewayNetworkingK8sIoV1GatewayStatusListenersItems0ConditionsItems0:
    """
    Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
     type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
     // other fields }

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
    message : str, default is Undefined, required
        message is a human readable message indicating details about the transition. This may be an empty string.
    observedGeneration : int, default is Undefined, optional
        observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
    reason : str, default is Undefined, required
        reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
    status : str, default is Undefined, required
        status of the condition, one of True, False, Unknown.
    $type : str, default is Undefined, required
        type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
    """


    lastTransitionTime: str

    message: str

    observedGeneration?: int

    reason: str

    status: "True" | "False" | "Unknown"

    $type: str


    check:
        len(message) <= 32768
        observedGeneration >= 0
        len(reason) <= 1024
        len(reason) >= 1
        regex_match(str(reason), r"^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$")
        len($type) <= 316
        regex_match(str($type), r"^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$")


schema GatewayNetworkingK8sIoV1GatewayStatusListenersItems0SupportedKindsItems0:
    """
    RouteGroupKind indicates the group and kind of a Route resource.

    Attributes
    ----------
    group : str, default is "gateway.networking.k8s.io", optional
        Group is the group of the Route.
    kind : str, default is Undefined, required
        Kind is the kind of the Route.
    """


    group?: str = "gateway.networking.k8s.io"

    kind: str


    check:
        len(group) <= 253
        regex_match(str(group), r"^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if group
        len(kind) <= 63
        len(kind) >= 1
        regex_match(str(kind), r"^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$")


